iAC : Infrastruture as code

resource "aws_instance" "webserver" {
	ami						 = "ami-0edfkdu7e0ewi9790"
	instance_type = "t2.micro"
	}
	
Configurtaion Management Tool :

Terraform :

It installs as a single binary which can we setup very qucikly 

HashiCorp Configurtaion Language Stands for HCL which is declarative (.tf)

main.tf

resource "aws_instance" "webserver" {
	ami						 = "ami-0edfkdu7e0ewi9790"
	instance_type = "t2.micro"
	}
resource "aws_s3_bucket" "finance" {
	bucket						 = "finance-0edfkdu7e0ewi9790"
	tags                            = { 
				Description  = "Finance and Payroll"
				}
	}
resource "aws_iam_user" "admin-user" {
	name  						 = "lucy"
	tags                            = { 
				Description  = "Team Lead"
				}
	}
	
Current - Desire ( Init - Plan - Apply )

Resource is an object that Terraform manages, it could file on a local host or virtual machine or s3

- local file type recource
- random pet recource

HashiCorp Configurtaion Language Syntax

<block> <parameters / argments> {
			key    = value
			key.1 = value.1
	}

Block contains information about platform and set of recource within that platform which we want to create.

                                         local = Provider
										 file = resource
											|					
									resource type ( local_file )
										/		_______________________	resource name			
Type of BlockName /    T
           |                         /      |
		   |                        /       |
resource "local_file" "pet" {
        filename = "/root/pets.txt"
        content  = "I l0ve Pyth0n"
  }

resource "random_pet" "Snake" {
	prefix	         = "Mr"
	separator = "."
	length        = "1"
}

Terraform Providers :

Terraform Variables :

variable "filename" {
					default = "/root/pets.txt"
					type 	   = string
					description = "the path of local file"
					}
variable "content" {
					default = "I l0ve Pyth0n"
					}
variable "prefix" {
					default = "Mrs"
					}
variable "separator" {
					default = "."
					}
variable "length" {
					default = "1"
					}
					
Variable block :

default 
type ( optional ) - number, bool, string, list, map, object, tuple
description ( optional )

TYPE - List Example : 

variable.tf

variable "prefix" {
					default = ["Mr", "Mrs", "Sir"]
					type = list(string)
					}

main.tf

resource "random_pet" "my-pet" {
						prefix = var.prefix[0]
						}
						
TYPE - Map Example :

Map is a data represented in format of key, value pairs

variable file-content {
				type = map(string)
				default = {
						"statement1" = "I love Python"
						"statement2" = "I'm The Python Developer"
						}
				}

resource local_file my-pet {
						filename = "/root/pets.txt"
						content = var.file-content["statement2"]
						}			
						
						
TYPE - Set Example :

Set do not allow duplicates

variable file-content {
				type = set(string)
				default = ["Mr", "Mrs", "Sir"]
				}

resource "random_pet" "my-pet" {
						file-content = var.file-content[0]
						}			
						
						
TYPE - Object Example : 

variable "Pyth0n" {
		type = object ({
					name = string
					color = string
					age = number
					food = list(string)
					favourit_pet = bool
					}
				)
				
		default = {
			name = "Pyth0n"
			color = "Blue"
			age = 10
			food = ["Brain", "Blood"]
			favourit_pet = true
		}
}

TYPE - List Example : 

variable.tf

variable kitty {
					default = ["Mr", "56", "true"]
					type = tuple([string, number, bool])
					}

main.tf

resource "random_pet" "my-pet" {
						prefix = var.kitty[0]
						prefix = var.kitty[1]
						prefix = var.kitty[2]
						}
						
						
